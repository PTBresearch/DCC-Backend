package de.ptb.dsi.dcc_backend.repository;

import de.ptb.dsi.dcc_backend.entity.Dcc;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;
import java.util.Optional;


import static org.assertj.core.api.Assertions.assertThat;

@DataJpaTest
public class DccRepositoryTest {
    @Autowired
    private DccRepository repository;
    @Autowired
    private TestEntityManager entityManager;
    private  Dcc dcc;
//    @BeforeEach
//    void init() {
//        dcc = new Dcc(null,
//                "CCM.M-K1-NPL9507",
//                "",
//                true);
//    }
    @AfterEach
    void tearDown() {
        dcc = null;
    }

    @Test
    void should_find_dcc_ByPid () {
       //given
        String givenName= "CCM.M-K1-NPL9507";
       //when
        entityManager.persist(dcc);
        Dcc expected = repository.findDccByPid(givenName);
        Optional<Dcc> dccOptional =repository.findById(dcc.getId());
        Dcc dccexepted = dccOptional.get();
        //then
        assertThat(dcc).isNotNull();
        assertThat(dccOptional.isPresent()).isTrue();
        Assertions.assertEquals(dccexepted, dcc);
        Assertions.assertEquals(1, repository.findAll().size());
        Assertions.assertEquals(expected, dcc);
        assertThat(dcc).hasFieldOrPropertyWithValue("pid", "CCM.M-K1-NPL9507");
        assertThat(dcc).hasFieldOrPropertyWithValue("isDccValid", true);
      // assertThat(dcc).hasFieldOrPropertyWithValue("pid", "CCM.M-");
    }

    @Test
    void should_dcc_exist_ByPid () {
        //given
        String name= "CCM.M-K1-NPL9507";
        //when
        entityManager.persist(dcc);
        boolean pidExist = repository.existsDccByPid(name);
        //then
        assertThat(pidExist).isTrue();
    }
}