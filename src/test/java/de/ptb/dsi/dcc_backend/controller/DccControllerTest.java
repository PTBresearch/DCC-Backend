package de.ptb.dsi.dcc_backend.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import de.ptb.dsi.dcc_backend.entity.Dcc;
import de.ptb.dsi.dcc_backend.service.DccServiceImpl;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;

import java.util.List;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@ExtendWith(MockitoExtension.class)
class DccControllerTest {
    @Mock
    private DccServiceImpl service;
    @InjectMocks
    private DccController controller;
    @Autowired
    private MockMvc mockMvc;
    private Dcc dcc;
    List<String> pidList;
    private String xmlBase64;

//    @BeforeEach
//    void setUp() {
//        mockMvc = MockMvcBuilders.standaloneSetup(controller).build();
//        dcc = new Dcc(null,
//                "CCM.M-K1-NPL9507",
//                "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPGRjYzpkaWdpdGFsQ2FsaWJyYXRpb25DZXJ0aWZpY2F0ZSB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4bWxuczpkY2M9Imh0dHBzOi8vcHRiLmRlL2RjYyIgeG1sbnM6c2k9Imh0dHBzOi8vcHRiLmRlL3NpIiB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHBzOi8vcHRiLmRlL2RjYyBodHRwczovL3d3dy5wdGIuZGUvZGNjL2RjYy54c2QgaHR0cHM6Ly9wdGIuZGUvc2kgaHR0cHM6Ly93d3cucHRiLmRlL3NpL1NJX0Zvcm1hdC54c2QiIHNjaGVtYVZlcnNpb249IjMuMi4xIj4KICAgIDxkY2M6YWRtaW5pc3RyYXRpdmVEYXRhPgogICAgICAgIDxkY2M6ZGNjU29mdHdhcmU+CiAgICAgICAgICAgIDxkY2M6c29mdHdhcmU+CiAgICAgICAgICAgICAgICA8ZGNjOm5hbWU+CiAgICAgICAgICAgICAgICAgICAgPGRjYzpjb250ZW50Pk5vdGVwYWQrKzwvZGNjOmNvbnRlbnQ+CiAgICAgICAgICAgICAgICA8L2RjYzpuYW1lPgogICAgICAgICAgICAgICAgPGRjYzpyZWxlYXNlPnY4LjUuMzwvZGNjOnJlbGVhc2U+CiAgICAgICAgICAgIDwvZGNjOnNvZnR3YXJlPgogICAgICAgIDwvZGNjOmRjY1NvZnR3YXJlPgogICAgICAgIDxkY2M6Y29yZURhdGE+CiAgICAgICAgICAgIDxkY2M6Y291bnRyeUNvZGVJU08zMTY2XzE+REU8L2RjYzpjb3VudHJ5Q29kZUlTTzMxNjZfMT4KICAgICAgICAgICAgPGRjYzp1c2VkTGFuZ0NvZGVJU082MzlfMT5lbjwvZGNjOnVzZWRMYW5nQ29kZUlTTzYzOV8xPgogICAgICAgICAgICA8ZGNjOm1hbmRhdG9yeUxhbmdDb2RlSVNPNjM5XzE+ZW48L2RjYzptYW5kYXRvcnlMYW5nQ29kZUlTTzYzOV8xPgogICAgICAgICAgICA8ZGNjOnVuaXF1ZUlkZW50aWZpZXI+RXhjaGFuZ2U8L2RjYzp1bmlxdWVJZGVudGlmaWVyPgogICAgICAgICAgICA8ZGNjOmJlZ2luUGVyZm9ybWFuY2VEYXRlPjIwMjMtMDEtMDE8L2RjYzpiZWdpblBlcmZvcm1hbmNlRGF0ZT4KICAgICAgICAgICAgPGRjYzplbmRQZXJmb3JtYW5jZURhdGU+MjAyMy0wMi0wMTwvZGNjOmVuZFBlcmZvcm1hbmNlRGF0ZT4KICAgICAgICAgICAgPGRjYzpwZXJmb3JtYW5jZUxvY2F0aW9uPmxhYm9yYXRvcnk8L2RjYzpwZXJmb3JtYW5jZUxvY2F0aW9uPgogICAgICAgICAgICA8ZGNjOmlzc3VlRGF0ZT4yMDIzLTAzLTAxPC9kY2M6aXNzdWVEYXRlPgogICAgICAgIDwvZGNjOmNvcmVEYXRhPgogICAgICAgIDxkY2M6aXRlbXM+CiAgICAgICAgICAgIDxkY2M6aWRlbnRpZmljYXRpb25zPgogICAgICAgICAgICAgICAgPGRjYzppZGVudGlmaWNhdGlvbiByZWZUeXBlPSJiYXNpY19zZXJpYWxObyI+CiAgICAgICAgICAgICAgICAgICAgPGRjYzppc3N1ZXI+Y2FsaWJyYXRpb25MYWJvcmF0b3J5PC9kY2M6aXNzdWVyPgogICAgICAgICAgICAgICAgICAgIDxkY2M6dmFsdWU+c2VyaWFsTm88L2RjYzp2YWx1ZT4KICAgICAgICAgICAgICAgICAgICA8ZGNjOm5hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkY2M6Y29udGVudCBsYW5nPSJlbiI+U2VyaWFsIE5vLjwvZGNjOmNvbnRlbnQ+CiAgICAgICAgICAgICAgICAgICAgPC9kY2M6bmFtZT4KICAgICAgICAgICAgICAgIDwvZGNjOmlkZW50aWZpY2F0aW9uPgogICAgICAgICAgICA8L2RjYzppZGVudGlmaWNhdGlvbnM+CiAgICAgICAgICAgIDxkY2M6aXRlbSBpZD0id2VpZ2h0MDEiPgogICAgICAgICAgICAgICAgPGRjYzpuYW1lPgogICAgICAgICAgICAgICAgICAgIDxkY2M6Y29udGVudCBsYW5nPSJlbiI+TWFzcyB0cmFuc2ZlciBzdGFuZGFyZDwvZGNjOmNvbnRlbnQ+CiAgICAgICAgICAgICAgICA8L2RjYzpuYW1lPgogICAgICAgICAgICAgICAgPGRjYzppZGVudGlmaWNhdGlvbnM+CiAgICAgICAgICAgICAgICAgICAgPGRjYzppZGVudGlmaWNhdGlvbiByZWZUeXBlPSJtYXNzX21hdGVyaWFsIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRjYzppc3N1ZXI+bWFudWZhY3R1cmVyPC9kY2M6aXNzdWVyPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGNjOnZhbHVlPm5hdHVyYWwgc2lsaWNvbjwvZGNjOnZhbHVlPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGNjOm5hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGNjOmNvbnRlbnQgbGFuZz0iZW4iPk1hdGVyaWFsIG9mIHRyYW5zZmVyIG5vcm1hbDwvZGNjOmNvbnRlbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGNjOm5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9kY2M6aWRlbnRpZmljYXRpb24+CiAgICAgICAgICAgICAgICAgICAgPGRjYzppZGVudGlmaWNhdGlvbiByZWZUeXBlPSJtYXNzX3NoYXBlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRjYzppc3N1ZXI+bWFudWZhY3R1cmVyPC9kY2M6aXNzdWVyPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGNjOnZhbHVlPnNwaGVyZTwvZGNjOnZhbHVlPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGNjOm5hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGNjOmNvbnRlbnQgbGFuZz0iZW4iPlNoYXBlIG9mIHRyYW5zZmVyIG5vcm1hbDwvZGNjOmNvbnRlbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGNjOm5hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9kY2M6aWRlbnRpZmljYXRpb24+CiAgICAgICAgICAgICAgICA8L2RjYzppZGVudGlmaWNhdGlvbnM+CiAgICAgICAgICAgICAgICA8ZGNjOml0ZW1RdWFudGl0aWVzPgogICAgICAgICAgICAgICAgICAgIDxkY2M6aXRlbVF1YW50aXR5IHJlZlR5cGU9ImJhc2ljX25vbWluYWxWYWx1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkY2M6bmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkY2M6Y29udGVudCBsYW5nPSJlbiI+Tm9taW5hbCBtYXNzPC9kY2M6Y29udGVudD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kY2M6bmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNpOnJlYWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2k6dmFsdWU+MTwvc2k6dmFsdWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2k6dW5pdD5ca2lsb2dyYW08L3NpOnVuaXQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2k6cmVhbD4KICAgICAgICAgICAgICAgICAgICA8L2RjYzppdGVtUXVhbnRpdHk+CiAgICAgICAgICAgICAgICA8L2RjYzppdGVtUXVhbnRpdGllcz4KICAgICAgICAgICAgPC9kY2M6aXRlbT4KICAgICAgICA8L2RjYzppdGVtcz4KICAgICAgICA8ZGNjOmNhbGlicmF0aW9uTGFib3JhdG9yeT4KICAgICAgICAgICAgPGRjYzpjb250YWN0PgogICAgICAgICAgICAgICAgPGRjYzpuYW1lPgogICAgICAgICAgICAgICAgICAgIDxkY2M6Y29udGVudD5OUEw8L2RjYzpjb250ZW50PgogICAgICAgICAgICAgICAgPC9kY2M6bmFtZT4KICAgICAgICAgICAgICAgIDxkY2M6bG9jYXRpb24+CiAgICAgICAgICAgICAgICAgICAgPGRjYzpjaXR5PlRlZGRpbmd0b248L2RjYzpjaXR5PgogICAgICAgICAgICAgICAgICAgIDxkY2M6cG9zdENvZGU+VFcxMSAwV0w8L2RjYzpwb3N0Q29kZT4KICAgICAgICAgICAgICAgICAgICA8ZGNjOnN0cmVldD5IYW1wdG9uIFJvYWQ8L2RjYzpzdHJlZXQ+CiAgICAgICAgICAgICAgICAgICAgPGRjYzpmdXJ0aGVyPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGNjOmNvbnRlbnQgbGFuZz0iZW4iPldvcmtpbmcgR3JvdXAgMS4xMSBNYXNzPC9kY2M6Y29udGVudD4KICAgICAgICAgICAgICAgICAgICA8L2RjYzpmdXJ0aGVyPgogICAgICAgICAgICAgICAgPC9kY2M6bG9jYXRpb24+CiAgICAgICAgICAgIDwvZGNjOmNvbnRhY3Q+CiAgICAgICAgPC9kY2M6Y2FsaWJyYXRpb25MYWJvcmF0b3J5PgogICAgICAgIDxkY2M6cmVzcFBlcnNvbnM+CiAgICAgICAgICAgIDxkY2M6cmVzcFBlcnNvbj4KICAgICAgICAgICAgICAgIDxkY2M6cGVyc29uPgogICAgICAgICAgICAgICAgICAgIDxkY2M6bmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRjYzpjb250ZW50IGxhbmc9ImVuIj5QRzwvZGNjOmNvbnRlbnQ+CiAgICAgICAgICAgICAgICAgICAgPC9kY2M6bmFtZT4KICAgICAgICAgICAgICAgIDwvZGNjOnBlcnNvbj4KICAgICAgICAgICAgPC9kY2M6cmVzcFBlcnNvbj4KICAgICAgICA8L2RjYzpyZXNwUGVyc29ucz4KICAgICAgICA8ZGNjOmN1c3RvbWVyPgogICAgICAgICAgICA8ZGNjOm5hbWU+CiAgICAgICAgICAgICAgICA8ZGNjOmNvbnRlbnQ+Q29uc3VsdGF0aXZlIENvbW1pdHRlZSBmb3IgTWFzcyAoQ0NNKTwvZGNjOmNvbnRlbnQ+CiAgICAgICAgICAgIDwvZGNjOm5hbWU+CiAgICAgICAgICAgIDxkY2M6bG9jYXRpb24+CiAgICAgICAgICAgICAgICA8ZGNjOmNpdHk+UGFyaXM8L2RjYzpjaXR5PgogICAgICAgICAgICAgICAgPGRjYzpjb3VudHJ5Q29kZT5GUjwvZGNjOmNvdW50cnlDb2RlPgogICAgICAgICAgICAgICAgPGRjYzpwb3N0Q29kZT5GLTkyMzEyIFNldnJlcyBDZWRleDwvZGNjOnBvc3RDb2RlPgogICAgICAgICAgICAgICAgPGRjYzpzdHJlZXQ+R2FybmQgUnVlPC9kY2M6c3RyZWV0PgogICAgICAgICAgICAgICAgPGRjYzpzdHJlZXRObz4xMjwvZGNjOnN0cmVldE5vPgogICAgICAgICAgICAgICAgPGRjYzpmdXJ0aGVyPgogICAgICAgICAgICAgICAgICAgIDxkY2M6Y29udGVudCBsYW5nPSJlbiI+V29ya2luZyBHcm91cCAxLjExIE1hc3M8L2RjYzpjb250ZW50PgogICAgICAgICAgICAgICAgPC9kY2M6ZnVydGhlcj4KICAgICAgICAgICAgPC9kY2M6bG9jYXRpb24+CiAgICAgICAgPC9kY2M6Y3VzdG9tZXI+CiAgICAgICAgPGRjYzpzdGF0ZW1lbnRzPgogICAgICAgICAgICA8ZGNjOnN0YXRlbWVudD4KICAgICAgICAgICAgICAgIDxkY2M6ZGVjbGFyYXRpb24+CiAgICAgICAgICAgICAgICAgICAgPGRjYzpjb250ZW50IGxhbmc9ImVuIj5UaGlzIGlzIGEgcmVwb3J0IGluIFhNTC1mb3JtYXQgZm9yIGEgZGF0YSBleGNoYW5nZS48L2RjYzpjb250ZW50PgogICAgICAgICAgICAgICAgPC9kY2M6ZGVjbGFyYXRpb24+CiAgICAgICAgICAgIDwvZGNjOnN0YXRlbWVudD4KICAgICAgICA8L2RjYzpzdGF0ZW1lbnRzPgogICAgPC9kY2M6YWRtaW5pc3RyYXRpdmVEYXRhPgogICAgPGRjYzptZWFzdXJlbWVudFJlc3VsdHM+CiAgICAgICAgPGRjYzptZWFzdXJlbWVudFJlc3VsdCByZWZJZD0id2VpZ2h0MDEgbWVhczEiPgogICAgICAgICAgICA8ZGNjOm5hbWU+CiAgICAgICAgICAgICAgICA8ZGNjOmNvbnRlbnQgbGFuZz0iZW4iPldlaWdodGVkIG1lYW4gdmFsdWU8L2RjYzpjb250ZW50PgogICAgICAgICAgICA8L2RjYzpuYW1lPgogICAgICAgICAgICA8ZGNjOnVzZWRNZXRob2RzPgogICAgICAgICAgICAgICAgPGRjYzp1c2VkTWV0aG9kIHJlZlR5cGU9ImJhc2ljX3VuY2VydGFpbnR5Ij4KICAgICAgICAgICAgICAgICAgICA8ZGNjOm5hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkY2M6Y29udGVudCBsYW5nPSJlbiI+TWVhc3VyZW1lbnQgdW5jZXJ0YWludHk8L2RjYzpjb250ZW50PgogICAgICAgICAgICAgICAgICAgIDwvZGNjOm5hbWU+CiAgICAgICAgICAgICAgICAgICAgPGRjYzpkZXNjcmlwdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRjYzpjb250ZW50IGxhbmc9ImVuIj5UaGUgdW5jZXJ0YWludHkgc3RhdGVkIGlzIHRoZSBleHBhbmRlZCBtZWFzdXJlbWVudCB1bmNlcnRhaW50eSBvYnRhaW5lZCBieSBtdWx0aXBseWluZyB0aGUgc3RhbmRhcmQgbWVhc3VyZW1lbnQgdW5jZXJ0YWludHkgYmUgdGhlIGNvdmVyYWdlIGZhY3RvciBrID0gMi4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEl0IGhhcyBiZWVuIGRldGVybWluZSBpbiBhY2NvcmRhbmNlIHdpdGggIEpDR00gMTAwOjIwMDguIFRoZSB2YWx1ZSBvZiB0aGUgbWVhc3VyZWFuZCB0aGVuIG5vcm1hbGx5IGxpZXMsIHdpdGggYSBwcm9iYWJpbGl0eSBvZiBhcHByb3hpbWF0ZWx5IDk1ICAlLCB3aXRoIHRoZSBhdHRyaWJ1dGVkIGNvdmVyYWdlIGludGVydmFsLjwvZGNjOmNvbnRlbnQ+CiAgICAgICAgICAgICAgICAgICAgPC9kY2M6ZGVzY3JpcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPGRjYzpub3JtPkpDR00gMTAwOjIwMDg8L2RjYzpub3JtPgogICAgICAgICAgICAgICAgPC9kY2M6dXNlZE1ldGhvZD4KICAgICAgICAgICAgICAgIDxkY2M6dXNlZE1ldGhvZD4KICAgICAgICAgICAgICAgICAgICA8ZGNjOm5hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkY2M6Y29udGVudCBsYW5nPSJlbiI+UHJvY2VkdXJlIGZvciBtYXNzIGRldGVybWluYXRpb248L2RjYzpjb250ZW50PgogICAgICAgICAgICAgICAgICAgIDwvZGNjOm5hbWU+CiAgICAgICAgICAgICAgICAgICAgPGRjYzpkZXNjcmlwdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRjYzpjb250ZW50IGxhbmc9ImVuIj5XZWlnaHRlZCBtZWFuIHZhbHVlPC9kY2M6Y29udGVudD4KICAgICAgICAgICAgICAgICAgICA8L2RjYzpkZXNjcmlwdGlvbj4KICAgICAgICAgICAgICAgIDwvZGNjOnVzZWRNZXRob2Q+CiAgICAgICAgICAgIDwvZGNjOnVzZWRNZXRob2RzPgogICAgICAgICAgICA8ZGNjOnJlc3VsdHM+CiAgICAgICAgICAgICAgICA8ZGNjOnJlc3VsdCByZWZUeXBlPSJtYXNzX21hc3MiPgogICAgICAgICAgICAgICAgICAgIDxkY2M6bmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRjYzpjb250ZW50IGxhbmc9ImVuIj5SZXN1bHQ6IHdlaWdodGVkIG1lYW4gdmFsdWU8L2RjYzpjb250ZW50PgogICAgICAgICAgICAgICAgICAgIDwvZGNjOm5hbWU+CiAgICAgICAgICAgICAgICAgICAgPGRjYzpkYXRhPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGNjOnF1YW50aXR5IHJlZlR5cGU9ImJhc2ljX25vbWluYWxWYWx1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGNjOm5hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRjYzpjb250ZW50IGxhbmc9ImVuIj5ub21pbmFsIHZhbHVlPC9kY2M6Y29udGVudD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGNjOm5hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2k6cmVhbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2k6dmFsdWU+MTwvc2k6dmFsdWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNpOnVuaXQ+XGtpbG9ncmFtPC9zaTp1bml0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zaTpyZWFsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2RjYzpxdWFudGl0eT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRjYzpxdWFudGl0eSByZWZUeXBlPSJiYXNpY19tZWFzdXJlZFZhbHVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkY2M6bmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGNjOmNvbnRlbnQgbGFuZz0iZW4iPm1hc3M8L2RjYzpjb250ZW50PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kY2M6bmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzaTpyZWFsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzaTp2YWx1ZT4xLjAwMDQ3ODwvc2k6dmFsdWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNpOnVuaXQ+XGtpbG9ncmFtPC9zaTp1bml0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzaTpleHBhbmRlZFVuYz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNpOnVuY2VydGFpbnR5PjAuMDAwMDMyPC9zaTp1bmNlcnRhaW50eT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNpOmNvdmVyYWdlRmFjdG9yPjI8L3NpOmNvdmVyYWdlRmFjdG9yPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2k6Y292ZXJhZ2VQcm9iYWJpbGl0eT4wLjk1PC9zaTpjb3ZlcmFnZVByb2JhYmlsaXR5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2k6ZXhwYW5kZWRVbmM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NpOnJlYWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGNjOnF1YW50aXR5PgogICAgICAgICAgICAgICAgICAgIDwvZGNjOmRhdGE+CiAgICAgICAgICAgICAgICA8L2RjYzpyZXN1bHQ+CiAgICAgICAgICAgIDwvZGNjOnJlc3VsdHM+CiAgICAgICAgPC9kY2M6bWVhc3VyZW1lbnRSZXN1bHQ+CiAgICA8L2RjYzptZWFzdXJlbWVudFJlc3VsdHM+CjwvZGNjOmRpZ2l0YWxDYWxpYnJhdGlvbkNlcnRpZmljYXRlPg==",
//                true);
//        xmlBase64 = "";
//        pidList= Arrays.asList(  "https://d-si.ptb.de/api/d-dcc/dcc/CCM.M-K1-PTB9608",
//                                 "https://d-si.ptb.de/api/d-dcc/dcc/CCM.M-K1-KRISS9703",
//                                 "https://d-si.ptb.de/api/d-dcc/dcc/CCM.M-K1-NPL9507",
//                                 "https://d-si.ptb.de/api/d-dcc/dcc/CCM.M-K1-BIPM9502");
//    }

    @AfterEach
    void tearDown() {
        dcc = null;
        xmlBase64 = null;
        pidList=null;
    }
    @Test
    void should_return_pidList() throws Exception {
        when(service.getUrlListDccPid()).thenReturn(pidList);
        mockMvc.perform(MockMvcRequestBuilders.get("/api/d-dcc/dccPidList")
                        .contentType(MediaType.APPLICATION_JSON))
                       .andExpect(status().isOk())
                      .andDo(MockMvcResultHandlers.print());
        verify(service).getUrlListDccPid();
        verify(service,times(1)).getUrlListDccPid();
    }
    @Test
    void should_return_getBase64Xml_ByPid() throws Exception {
        //given
        String pid = "CCM.M-K1-NPL9507";
        when(service.existsDccByPid(pid)).thenReturn(true);
        when(service.getBase64XmlByPid(pid)).thenReturn(xmlBase64);
        mockMvc.perform(MockMvcRequestBuilders.get("/api/d-dcc/dcc/" + pid))
                .andExpect(status().isOk())
                .andDo(MockMvcResultHandlers.print());
        verify(service).getBase64XmlByPid(pid);
        verify(service, times(1)).getBase64XmlByPid(pid);
    }


    @Test
    void should_return_status_NotFound_getBase64XmlDccByPid() throws Exception {
        //given
        String pid = "CCM.M-K1-NPL9507";
        when(service.existsDccByPid(pid)).thenReturn(false);
        mockMvc.perform(MockMvcRequestBuilders
                        .get("/api/d-dcc/dcc/" + pid).contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isNotFound())
                .andDo(MockMvcResultHandlers.print());

    }

    @Test
    void should_return_addedDcc() throws Exception {

        when(service.saveIfNotExist(dcc)).thenReturn(true);
        when(service.saveDcc(dcc)).thenReturn(dcc);
        mockMvc.perform(MockMvcRequestBuilders
                        .post("/api/d-dcc/addDcc")
                        .contentType(MediaType.APPLICATION_JSON).content(asJsonString(dcc)))
                        .andExpect(status().isCreated())
                        .andDo(MockMvcResultHandlers.print());
        verify(service).saveDcc(dcc);
        verify(service, times(1)).saveDcc(dcc);
    }
    @Test
    void should_return_status_badRequest_by_post_addDcc_ifDccExist() throws Exception {

        when(service.saveIfNotExist(dcc)).thenReturn(false);
        mockMvc.perform(MockMvcRequestBuilders
                        .post("/api/d-dcc/addDcc")
                        .contentType(MediaType.APPLICATION_JSON).content(asJsonString(dcc)))
                        .andExpect(status().isBadRequest())
                        .andDo(MockMvcResultHandlers.print());
    }
    @Test
    void should_return_isDcc_valid() throws Exception {
        //given
        String pid = "CCM.M-K1-NPL9507";
        when(service.existsDccByPid(pid)).thenReturn(true);
        when(service.isDccValid(pid)).thenReturn(true);
        mockMvc.perform(MockMvcRequestBuilders
                        .get("/api/d-dcc/dccValidation/"+ pid)
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andDo(MockMvcResultHandlers.print());
        verify(service).isDccValid(pid);
        verify(service, times(1)).isDccValid(pid);

    }
    @Test
    void should_getXmlContent_byPid_and_refType() throws Exception {
        String pid= "CCM.M-K1-NPL9507";
        String refType="basic_uncertainty";
        String xml="<dcc:usedMethod refType=\"basic_uncertainty\">\r\n" +
                "                    <dcc:name>\r\n" +
                "                        <dcc:content lang=\"en\">Measurement uncertainty</dcc:content>\r\n" +
                "                    </dcc:name>\r\n" +
                "                    <dcc:description>\r\n" +
                "                        <dcc:content lang=\"en\">The uncertainty stated is the expanded measurement uncertainty obtained by multiplying the standard measurement uncertainty be the coverage factor k = 2.\r\n" +
                "                            It has been determine in accordance with  JCGM 100:2008. The value of the measureand then normally lies, with a probability of approximately 95  %, with the attributed coverage interval.</dcc:content>\r\n" +
                "                    </dcc:description>\r\n" +
                "                    <dcc:norm>JCGM 100:2008</dcc:norm>\r\n" +
                "                </dcc:usedMethod>";

        when(service.findNodeByRefType(pid,refType)).thenReturn(xml);
        mockMvc.perform(MockMvcRequestBuilders
                        .get("/api/d-dcc/dcc/"+ pid +"/" + refType)
                        .contentType(MediaType.APPLICATION_XML_VALUE))
                .andDo(MockMvcResultHandlers.print());
        verify(service).findNodeByRefType(pid,refType);
    }

    public static String asJsonString(final Object obj) {
        try {
            return new ObjectMapper().writeValueAsString(obj);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}