package de.ptb.dsi.dcc_backend.service;

import de.ptb.dsi.dcc_backend.entity.Dcc;
import de.ptb.dsi.dcc_backend.repository.DccRepository;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.xml.sax.SAXException;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerException;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

class DccServiceImplTest {

    @InjectMocks
    private DccServiceImpl service;
    @Mock
    private DccRepository dccRepository;
    private Dcc dcc;
    private String xmlBase64;

//    @BeforeEach
//    void setUp() {
//        MockitoAnnotations.openMocks(this);
//        dcc = new Dcc(null,
//                "CCM.M-K1-NPL9507",
//                "",
//                true);
//        xmlBase64 ="";
//    }

    @AfterEach
    void tearDown() {
        dcc = null;
    }

    @Test
    void find_dcc_byPid() {

        //given
        String pid = "CCM.M-K1-NPL9507";
        //Mock the call
        Mockito.when(dccRepository.findDccByPid(pid)).thenReturn(dcc);
        //when
        Dcc expected = service.getDccByPid(pid);
        //then
        assertEquals(dcc, expected);
    }
    @Test
    void given_dcc_to_add_should_return_addedDcc() {

        //Mock the call
        Mockito.when(dccRepository.save(dcc)).thenReturn(dcc);
        //when
        service.saveDcc(dcc);
        //then
        verify(dccRepository, times(1)).save(dcc);
    }
    @Test
    void should_returnBase64Xml_byPid(){
        //given
        String pid = "CCM.M-K1-NPL9507";
        ////Mock the call
        Mockito.when(dccRepository.save(any())).thenReturn(dcc);
        Mockito.when(dccRepository.existsDccByPid(pid)).thenReturn(true);
        Mockito.when(dccRepository.findDccByPid(pid)).thenReturn(dcc);
        //when
        String xml =dcc.getXmlBase64();
        //then
        String expected = service.getBase64XmlByPid(pid);
        assertEquals(xml, expected);
    }
    @Test
    void should_exist_dcc_byPid() {
        //given
        String pid = "CCM.M-K1-NPL9507";
        //Mock the call
        Mockito.when(dccRepository.existsDccByPid(pid)).thenReturn(true);
        //when
        boolean isDccValid = service.existsDccByPid(pid);
        //then
        assertEquals(isDccValid, true);
    }

    @Test
    void should_find_node_by_refType() throws ParserConfigurationException, IOException, TransformerException, SAXException {
        //given
        String pid= "CCM.M-K1-NPL9507";
        String refType="basic_uncertainty";
        //Mock the call
        Mockito.when(dccRepository.existsDccByPid(pid)).thenReturn(true);
        Mockito.when(dccRepository.findDccByPid(pid)).thenReturn(dcc);
        //when
        String xml="<dcc:usedMethod refType=\"basic_uncertainty\">\r\n" +
                "                    <dcc:name>\r\n" +
                "                        <dcc:content lang=\"en\">Measurement uncertainty</dcc:content>\r\n" +
                "                    </dcc:name>\r\n" +
                "                    <dcc:description>\r\n" +
                "                        <dcc:content lang=\"en\">The uncertainty stated is the expanded measurement uncertainty obtained by multiplying the standard measurement uncertainty be the coverage factor k = 2.\r\n" +
                "                            It has been determine in accordance with  JCGM 100:2008. The value of the measureand then normally lies, with a probability of approximately 95  %, with the attributed coverage interval.</dcc:content>\r\n" +
                "                    </dcc:description>\r\n" +
                "                    <dcc:norm>JCGM 100:2008</dcc:norm>\r\n" +
                "                </dcc:usedMethod>";
        //then
        String expected= service.findNodeByRefType(pid,refType);
        assertEquals(xml, expected);
    }
    @Test
    void should_return_pid_notExist() throws ParserConfigurationException, IOException, TransformerException, SAXException {
        //given
        String pid= "CCM.M-K1-NPL95";
        String refType="basic_uncertainty";
        //Mock the call
        Mockito.when(dccRepository.findDccByPid(pid)).thenReturn(dcc);
        //when
        String message="pid not exist";
        //then
        String expected= service.findNodeByRefType(pid,refType);
        assertEquals(message, expected);
    }
    @Test
    void should_return_refType_notExist() throws ParserConfigurationException, IOException, TransformerException, SAXException {
        //given
        String pid= "CCM.M-K1-NPL9507";
        String refType="uncertainty";
        //Mock the call
        Mockito.when(dccRepository.existsDccByPid(pid)).thenReturn(true);
        Mockito.when(dccRepository.findDccByPid(pid)).thenReturn(dcc);
        //when
        String message="refType not exist";
        //then
        String expected= service.findNodeByRefType(pid,refType);
        assertEquals(message, expected);
    }
}